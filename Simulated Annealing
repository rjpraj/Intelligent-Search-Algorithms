@author: Rajesh Prajapati
"""
# Simulated Annealing Code 

import numpy as np
def obj_func(x):
    x1=x[0]
    x2=x[1]
    A=0
    B=0
    for i in range(1,6):
        A+=i*np.cos((i+1)*x1+i)
        B+=i*np.cos((i+1)*x2+i)
    return A*B

def metropolis(x):
    global T_max
    return np.exp(-x/T_max) # assumin k =1
        
T_max=20000 # high temperature as initial
T_min=1 #Suitably low min temperature as final
c=0.5 #reduction factor
n=200 #no. of iterations in each step
step_size=5 

X=np.random.randint(1,255,size=2)
while T_max>T_min:
    print("Temperature:",T_max)
    for i in range(n):
        X1=X-np.array([step_size, step_size])+np.random.rand(2)*step_size*2 #generate new solution
        X1[0]=max(0,min(X1[0],255))
        X1[1]=max(0,min(X1[1],255)) #bringing values in range
        diff=obj_func(X1)-obj_func(X)
        if diff<=0:
            X=X1
        else:
            if np.random.rand()<=metropolis(diff):
                X=X1
    T_max=T_max*c
    print("solution: ",X)
    print("Fitness",obj_func(X))
print("\n")
print("Final solution:",X)
print("Final fitness:",obj_func(X))

